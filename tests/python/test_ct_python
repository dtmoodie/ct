#!/usr/bin/python@Python_VERSION_MAJOR@

import test_ct_python
import math

obj = test_ct_python.WithEnum()
print(obj)

obj = test_ct_python.ReflectedStruct(x=1, y=2, z=3, id=10)
print(obj)
assert obj.x == 1, str(obj.x)
assert obj.y == 2, str(obj.y)
assert obj.z == 3, str(obj.z)
assert obj.id == 10, str(obj.id)

obj = test_ct_python.ReflectedStruct(id=10, y=2, z=3, x=1)
print(obj)
assert obj.x == 1, str(obj.x)
assert obj.y == 2, str(obj.y)
assert obj.z == 3, str(obj.z)
assert obj.id == 10, str(obj.id)

obj = test_ct_python.Inherited(x=1, y=2, z=3, id=20, w = 5)
print(obj)
assert obj.x == 1, str(obj.x)
assert obj.y == 2, str(obj.y)
assert obj.z == 3, str(obj.z)
assert obj.id == 20, str(obj.id)
assert obj.w == 5, str(obj.w)

obj = test_ct_python.Composite(a={'x':1,'y':2}, b={'x':5,'z':10})
print(obj)
assert obj.a.x == 1, str(obj.a.x)
assert obj.a.y == 2, str(obj.a.y)

assert obj.b.x == 5, str(obj.b.x)
assert obj.b.z == 10, str(obj.b.z)


obj = test_ct_python.TestA(x=5, y=10, z=100)
print(obj)
assert obj.x == 5, str(obj.x)
assert obj.y == 10, str(obj.y)
assert obj.z == 100, str(obj.z)
assert abs(obj.norm() - 100.623) < 0.001, str(obj.norm())


obj = test_ct_python.TestB(x=4, y=5, z=6)
print(obj)
assert obj.x == 4, str(obj.x)
assert obj.y == 5, str(obj.y)
assert obj.z == 6, str(obj.z)


obj = test_ct_python.TestC()
print(obj)

obj = test_ct_python.TestVec()
print(obj)

obj = test_ct_python.PrivateMutableAccess(5)
assert(obj.private_mutable_property == 5)
print(obj)

obj = test_ct_python.InternallyReflected()
print(obj)

obj = test_ct_python.PrivateGetAndSet(5)
assert(obj.private_get_and_set == 5)
print(obj)

obj = test_ct_python.MultipleInheritance(private_mutable_property=10, x=5, y = 12, z = 15, id=11, asdf = 20)
assert(obj.private_mutable_property == 10)
assert(obj.id == 11)
assert(obj.asdf == 20)
assert(obj.x == 5)
assert(obj.y == 12)
assert(obj.z == 15)
print(obj)

obj = test_ct_python.ExplicitThisProperty(prop=10)
assert(obj.prop == 10)
print(obj)

obj = test_ct_python.DerivedC()
print(obj)

obj = test_ct_python.Virtual()
print(obj)

print(dir(test_ct_python.std))


obj = test_ct_python.WithEnum()
val = obj.m_enum
assert str(val) == 'k1234'
assert int(val) == 0
val = test_ct_python.MyEnum.k2345
assert str(val) == 'k2345'
assert int(val) == 1

val = test_ct_python.MyClass.StandardEnum.k0
assert str(val) == 'k0'
assert int(val) == 0

val = test_ct_python.MyClass.StandardEnum.k1
assert str(val) == 'k1'
assert int(val) == 1

val = test_ct_python.MyClass.StandardEnum2.k1234
assert str(val) == 'k1234'
assert int(val) == 1

val = test_ct_python.MyClass.StandardEnum2.kASDF
assert str(val) == 'kASDF'
assert int(val) == 0

print('all enum assertions passed')
